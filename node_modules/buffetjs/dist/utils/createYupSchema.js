"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodash = require("lodash");

var yup = _interopRequireWildcard(require("yup"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

var createYupSchema = function createYupSchema(type, validations) {
  var translatedErrors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var schema = yup.mixed();

  if (['text', 'textarea', 'email', 'password', 'select'].includes(type)) {
    schema = yup.string(translatedErrors.string);
  }

  if (type === 'email') {
    schema = schema.email(translatedErrors.email);
  }

  if (type === 'number') {
    schema = yup.number().transform(function (cv) {
      return (0, _lodash.isNaN)(cv) ? undefined : cv;
    }).typeError(translatedErrors.number);
  }

  if (['date', 'time'].includes(type)) {
    schema = schema.date().typeError(translatedErrors.date);
  }

  Object.keys(validations).forEach(function (validation) {
    var validationValue = validations[validation];

    if (!!validationValue || !(0, _lodash.isBoolean)(validationValue) && Number.isInteger(Math.floor(validationValue)) || validationValue === 0) {
      switch (validation) {
        case 'required':
          schema = schema.required(translatedErrors.required);
          break;

        case 'max':
        case 'maxLength':
          schema = schema.max(validationValue, translatedErrors.max);
          break;

        case 'min':
        case 'minLength':
          schema = schema.min(validationValue, translatedErrors.min);
          break;

        case 'regex':
          schema = schema.matches(validationValue, translatedErrors.regex);
          break;

        case 'lowercase':
          if (['text', 'textarea', 'email', 'string'].includes(type)) {
            schema = schema.strict().lowercase();
          }

          break;

        case 'uppercase':
          if (['text', 'textarea', 'email', 'string'].includes(type)) {
            schema = schema.strict().uppercase(translatedErrors.uppercase);
          }

          break;

        case 'positive':
          if (['number', 'integer', 'bigint', 'float', 'decimal'].includes(type)) {
            schema = schema.positive();
          }

          break;

        case 'negative':
          if (['number', 'integer', 'bigint', 'float', 'decimal'].includes(type)) {
            schema = schema.negative();
          }

          break;

        default:
      }
    }
  });
  return schema;
};

var _default = createYupSchema;
exports["default"] = _default;