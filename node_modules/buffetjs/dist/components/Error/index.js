"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = require("lodash");

var _createYupSchema = _interopRequireDefault(require("../../utils/createYupSchema"));

var _reducer = _interopRequireDefault(require("../../utils/reducer"));

var _error = require("../../commonPropTypes/error");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function Error(_ref) {
  var children = _ref.children,
      translatedErrors = _ref.translatedErrors,
      type = _ref.type,
      validations = _ref.validations,
      value = _ref.value;

  var _useReducer = (0, _react.useReducer)(_reducer["default"], {
    error: false,
    canCheck: !(0, _lodash.isEmpty)(value)
  }),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1];

  var error = state.error,
      canCheck = state.canCheck;

  var resetError = function resetError() {
    dispatch({
      type: 'SET_ERROR',
      error: null
    });
  };

  var setError = function setError(message) {
    dispatch({
      type: 'SET_ERROR',
      error: message
    });
  };

  var handleBlur = function () {
    var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee(_ref2) {
      var target, message;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              target = _ref2.target;

              if (!canCheck) {
                _context.next = 13;
                break;
              }

              _context.prev = 2;
              _context.next = 5;
              return (0, _createYupSchema["default"])(type, validations, translatedErrors).validate(target.value);

            case 5:
              resetError();
              _context.next = 12;
              break;

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](2);
              message = _context.t0.message;
              setError(message);

            case 12:
              return _context.abrupt("return");

            case 13:
              resetError();

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[2, 8]]);
    }));

    return function handleBlur(_x) {
      return _ref3.apply(this, arguments);
    };
  }();

  if (children) {
    return children({
      canCheck: canCheck,
      dispatch: dispatch,
      error: error,
      onBlur: handleBlur
    });
  }
}

Error.defaultProps = _objectSpread({}, _error.commonDefaultProps, {
  children: function children() {}
});
Error.propTypes = _objectSpread({}, _error.commonPropTypes, {
  children: _propTypes["default"].func
});
var _default = Error;
exports["default"] = _default;